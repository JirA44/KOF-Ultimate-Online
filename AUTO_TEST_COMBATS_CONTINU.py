#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test automatique continu des combats KOF
Teste tous les personnages sans intervention
"""

import subprocess
import time
import random
import os
import json
from datetime import datetime
import pyautogui
import psutil

# Configuration
GAME_EXE = r"D:\KOF Ultimate Online\KOF_Ultimate_Online.exe"
LOG_FILE = "auto_test_combats.log"
RESULTS_FILE = "test_combats_results.json"
TEST_DURATION = 30  # Secondes par combat
PAUSE_BETWEEN_TESTS = 2

# Charger la liste des personnages
with open('data/select.def', 'r', encoding='utf-8') as f:
    content = f.read()

characters = []
for line in content.split('\n'):
    line = line.strip()
    if line and not line.startswith(';') and not line.startswith('['):
        if ',' in line:
            char_name = line.split(',')[0].strip()
            if char_name and char_name not in ['randomselect', 'chars', 'stages']:
                characters.append(char_name)

print(f"üìã {len(characters)} personnages √† tester")

# Charger les r√©sultats pr√©c√©dents
if os.path.exists(RESULTS_FILE):
    with open(RESULTS_FILE, 'r', encoding='utf-8') as f:
        results = json.load(f)
else:
    results = {
        'tested': {},
        'crashes': [],
        'working': [],
        'total_tests': 0,
        'start_time': datetime.now().isoformat()
    }

def log(message):
    """Log message avec timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_msg = f"[{timestamp}] {message}"
    print(log_msg)

    with open(LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(log_msg + '\n')

def save_results():
    """Sauvegarder les r√©sultats"""
    with open(RESULTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)

def kill_game():
    """Tuer le processus du jeu"""
    for proc in psutil.process_iter(['name']):
        try:
            if 'KOF_Ultimate_Online' in proc.info['name'] or 'Ikemen' in proc.info['name']:
                proc.kill()
                time.sleep(1)
        except:
            pass

def test_character_pair(char1, char2):
    """Tester un combat entre 2 personnages"""
    log(f"üéÆ Test: {char1} vs {char2}")

    # Tuer tout processus existant
    kill_game()
    time.sleep(1)

    # Lancer le jeu
    try:
        process = subprocess.Popen([GAME_EXE], cwd=os.path.dirname(GAME_EXE))
        time.sleep(5)  # Attendre chargement

        # V√©rifier si le jeu a crash√© au d√©marrage
        if process.poll() is not None:
            log(f"‚ùå Crash au d√©marrage avec {char1} vs {char2}")
            results['crashes'].append({
                'char1': char1,
                'char2': char2,
                'type': 'startup_crash',
                'time': datetime.now().isoformat()
            })
            return False

        # Navigation automatique vers Versus
        time.sleep(3)

        # Appuyer sur ENTER pour menu principal
        pyautogui.press('return')
        time.sleep(0.5)

        # Aller √† Versus (fl√®che bas x1)
        pyautogui.press('down')
        time.sleep(0.3)
        pyautogui.press('return')
        time.sleep(2)

        # S√©lection P1 - Position al√©atoire puis SPACE pour s√©lectionner
        for _ in range(random.randint(0, len(characters) - 1)):
            pyautogui.press('right')
            time.sleep(0.05)

        pyautogui.press('space')  # S√©lection manuelle P1
        time.sleep(1)

        # S√©lection P2 - Position al√©atoire puis SPACE
        for _ in range(random.randint(0, len(characters) - 1)):
            pyautogui.press('right')
            time.sleep(0.05)

        pyautogui.press('space')  # S√©lection manuelle P2
        time.sleep(2)

        # V√©rifier crash apr√®s s√©lection
        if process.poll() is not None:
            log(f"‚ùå Crash apr√®s s√©lection: {char1} vs {char2}")
            results['crashes'].append({
                'char1': char1,
                'char2': char2,
                'type': 'selection_crash',
                'time': datetime.now().isoformat()
            })
            return False

        # Laisser le combat se d√©rouler
        log(f"‚è≥ Combat en cours... ({TEST_DURATION}s)")

        # Simuler des inputs al√©atoires pendant le combat
        start_time = time.time()
        while time.time() - start_time < TEST_DURATION:
            if process.poll() is not None:
                log(f"‚ùå Crash pendant combat: {char1} vs {char2}")
                results['crashes'].append({
                    'char1': char1,
                    'char2': char2,
                    'type': 'combat_crash',
                    'time': datetime.now().isoformat()
                })
                return False

            # Input al√©atoire
            if random.random() < 0.3:
                key = random.choice(['a', 's', 'd', 'z', 'x', 'c'])
                pyautogui.press(key)

            time.sleep(0.5)

        # Combat r√©ussi
        log(f"‚úÖ Combat OK: {char1} vs {char2}")
        results['working'].append({
            'char1': char1,
            'char2': char2,
            'time': datetime.now().isoformat()
        })

        # Tuer le jeu
        kill_game()
        return True

    except Exception as e:
        log(f"‚ùå Erreur: {e}")
        kill_game()
        return False

    finally:
        time.sleep(PAUSE_BETWEEN_TESTS)

def main():
    """Boucle principale de test"""
    log("=" * 70)
    log("üöÄ D√âMARRAGE TEST AUTOMATIQUE CONTINU")
    log(f"üìä {len(characters)} personnages √† tester")
    log(f"‚è±Ô∏è  {TEST_DURATION}s par combat")
    log("=" * 70)

    test_count = 0

    try:
        while True:
            # S√©lectionner 2 personnages al√©atoires
            char1 = random.choice(characters)
            char2 = random.choice(characters)

            # √âviter de tester un perso contre lui-m√™me
            while char2 == char1:
                char2 = random.choice(characters)

            # Cr√©er cl√© unique pour ce combat
            pair_key = f"{char1}__vs__{char2}"

            # Marquer comme test√©
            if pair_key not in results['tested']:
                results['tested'][pair_key] = {
                    'attempts': 0,
                    'successes': 0,
                    'failures': 0
                }

            results['tested'][pair_key]['attempts'] += 1

            # Tester le combat
            success = test_character_pair(char1, char2)

            if success:
                results['tested'][pair_key]['successes'] += 1
            else:
                results['tested'][pair_key]['failures'] += 1

            # Incr√©menter compteur
            test_count += 1
            results['total_tests'] = test_count

            # Sauvegarder r√©sultats
            save_results()

            # Stats
            crash_rate = len(results['crashes']) / test_count * 100 if test_count > 0 else 0
            log(f"üìä Stats: {test_count} tests | {len(results['working'])} OK | {len(results['crashes'])} crashes ({crash_rate:.1f}%)")

            # Pause entre tests
            time.sleep(PAUSE_BETWEEN_TESTS)

    except KeyboardInterrupt:
        log("\nüõë Arr√™t demand√© par l'utilisateur")
        log(f"üìä Tests effectu√©s: {test_count}")
        log(f"‚úÖ R√©ussis: {len(results['working'])}")
        log(f"‚ùå Crashes: {len(results['crashes'])}")
        save_results()

        # G√©n√©rer rapport
        log("\nüìã RAPPORT FINAL:")
        log(f"   Total tests: {test_count}")
        log(f"   Combats OK: {len(results['working'])}")
        log(f"   Crashes: {len(results['crashes'])}")

        if results['crashes']:
            log("\n‚ùå Personnages probl√©matiques:")
            crash_chars = {}
            for crash in results['crashes']:
                for char in [crash['char1'], crash['char2']]:
                    crash_chars[char] = crash_chars.get(char, 0) + 1

            for char, count in sorted(crash_chars.items(), key=lambda x: x[1], reverse=True)[:10]:
                log(f"   {char}: {count} crashes")

if __name__ == '__main__':
    main()
