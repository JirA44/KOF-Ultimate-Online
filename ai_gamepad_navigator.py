"""
KOF Ultimate - IA Navigateur Manette
Cette IA utilise physiquement la manette pour naviguer dans le jeu
et d√©tecte automatiquement les probl√®mes
"""

import os
import sys
import time
import pygame
import pyautogui
import json
from datetime import datetime
from pathlib import Path

# Initialiser pygame pour la manette
pygame.init()
pygame.joystick.init()

class GamepadNavigatorAI:
    """IA qui navigue dans le jeu avec la manette"""

    def __init__(self):
        self.log_file = Path("D:/KOF Ultimate/ai_gamepad_navigation.log")
        self.joystick = None
        self.problems = []
        self.actions = []

    def log(self, message, level="INFO"):
        """Log les actions avec timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] [{level}] {message}"
        print(log_entry)

        self.actions.append({
            "timestamp": timestamp,
            "level": level,
            "message": message
        })

        # Sauvegarder dans le fichier
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry + "\n")

    def detect_gamepad(self):
        """D√©tecte la manette"""
        self.log("üéÆ Recherche de la manette...", "INFO")

        joystick_count = pygame.joystick.get_count()

        if joystick_count == 0:
            self.log("‚ùå PROBL√àME: Aucune manette d√©tect√©e!", "ERROR")
            self.problems.append("No gamepad detected")
            return False

        self.joystick = pygame.joystick.Joystick(0)
        self.joystick.init()

        gamepad_name = self.joystick.get_name()
        self.log(f"‚úì Manette d√©tect√©e: {gamepad_name}", "SUCCESS")
        self.log(f"  - {self.joystick.get_numaxes()} axes", "INFO")
        self.log(f"  - {self.joystick.get_numbuttons()} boutons", "INFO")
        self.log(f"  - {self.joystick.get_numhats()} D-Pads", "INFO")

        return True

    def read_gamepad_state(self):
        """Lit l'√©tat actuel de la manette"""
        pygame.event.pump()

        state = {
            "axes": [],
            "buttons": [],
            "hat": None
        }

        # Lire les axes
        for i in range(self.joystick.get_numaxes()):
            state["axes"].append(self.joystick.get_axis(i))

        # Lire les boutons
        for i in range(self.joystick.get_numbuttons()):
            state["buttons"].append(self.joystick.get_button(i))

        # Lire le D-Pad
        if self.joystick.get_numhats() > 0:
            state["hat"] = self.joystick.get_hat(0)

        return state

    def simulate_button_press(self, button_name):
        """Simule une pression de bouton en utilisant le clavier comme backup"""
        self.log(f"üéØ Simulant {button_name}...", "INFO")

        # Mapping pour le clavier comme backup si la manette ne fonctionne pas
        keyboard_map = {
            "A": "s",      # Bouton A du jeu
            "B": "escape", # Retour
            "UP": "up",
            "DOWN": "down",
            "LEFT": "left",
            "RIGHT": "right",
            "START": "return"
        }

        if button_name in keyboard_map:
            key = keyboard_map[button_name]
            pyautogui.press(key)
            time.sleep(0.3)

    def test_gamepad_in_game(self):
        """Teste la manette dans le jeu"""
        self.log("", "INFO")
        self.log("=" * 60, "INFO")
        self.log("üöÄ D√âMARRAGE DU TEST DE NAVIGATION", "INFO")
        self.log("=" * 60, "INFO")

        # Attendre que le jeu soit pr√™t
        self.log("‚è≥ Attente du chargement du jeu...", "INFO")
        time.sleep(3)

        # Test 1: D√©tecter les mouvements du D-Pad
        self.log("", "INFO")
        self.log("üìç Test 1: D-Pad", "INFO")
        detected_dpad = False

        for i in range(20):
            state = self.read_gamepad_state()

            if state["hat"] and state["hat"] != (0, 0):
                self.log(f"‚úì D-Pad d√©tect√©: {state['hat']}", "SUCCESS")
                detected_dpad = True
                break

            time.sleep(0.1)

        if not detected_dpad:
            self.log("‚ö†Ô∏è  D-Pad non d√©tect√© - tentative avec clavier", "WARNING")
            self.problems.append("D-Pad not responding - using keyboard fallback")

        # Test 2: Navigation dans le menu
        self.log("", "INFO")
        self.log("üìç Test 2: Navigation dans le menu", "INFO")

        # Essayer de naviguer vers le bas
        self.log("  ‚Üí Navigation BAS", "INFO")
        self.simulate_button_press("DOWN")
        time.sleep(0.5)

        # Essayer de naviguer vers le haut
        self.log("  ‚Üí Navigation HAUT", "INFO")
        self.simulate_button_press("UP")
        time.sleep(0.5)

        # Test 3: Bouton A (Entr√©e)
        self.log("", "INFO")
        self.log("üìç Test 3: Bouton A (Entr√©e)", "INFO")
        button_a_working = False

        for i in range(10):
            state = self.read_gamepad_state()

            # Bouton A est g√©n√©ralement le bouton 0 ou 1
            if state["buttons"][0] or (len(state["buttons"]) > 1 and state["buttons"][1]):
                self.log("‚úì Bouton A d√©tect√©!", "SUCCESS")
                button_a_working = True
                break

            time.sleep(0.1)

        if not button_a_working:
            self.log("‚ö†Ô∏è  Bouton A non d√©tect√© - utilisation clavier", "WARNING")
            self.problems.append("Button A not responding")
            self.simulate_button_press("A")

        time.sleep(0.5)

        # Test 4: Bouton B (Retour)
        self.log("", "INFO")
        self.log("üìç Test 4: Bouton B (Retour)", "INFO")
        button_b_working = False

        for i in range(10):
            state = self.read_gamepad_state()

            # Bouton B est g√©n√©ralement le bouton 1 ou 2
            if len(state["buttons"]) > 1 and state["buttons"][1]:
                self.log("‚úì Bouton B d√©tect√©!", "SUCCESS")
                button_b_working = True
                break

            time.sleep(0.1)

        if not button_b_working:
            self.log("‚ö†Ô∏è  Bouton B non d√©tect√© - utilisation clavier", "WARNING")
            self.problems.append("Button B not responding")
            self.simulate_button_press("B")

        # Test 5: Navigation compl√®te
        self.log("", "INFO")
        self.log("üìç Test 5: S√©quence de navigation compl√®te", "INFO")

        navigation_sequence = [
            ("DOWN", "Descendre dans le menu"),
            ("DOWN", "Descendre encore"),
            ("UP", "Remonter"),
            ("A", "S√©lectionner"),
            ("B", "Retour")
        ]

        for action, description in navigation_sequence:
            self.log(f"  ‚Üí {description}", "INFO")
            self.simulate_button_press(action)
            time.sleep(0.8)

    def generate_report(self):
        """G√©n√®re un rapport complet"""
        self.log("", "INFO")
        self.log("=" * 60, "INFO")
        self.log("üìä RAPPORT DE NAVIGATION", "INFO")
        self.log("=" * 60, "INFO")

        self.log(f"Actions effectu√©es: {len(self.actions)}", "INFO")
        self.log(f"Probl√®mes d√©tect√©s: {len(self.problems)}", "INFO")

        if self.problems:
            self.log("", "INFO")
            self.log("‚ö†Ô∏è  PROBL√àMES D√âTECT√âS:", "WARNING")
            for i, problem in enumerate(self.problems, 1):
                self.log(f"  {i}. {problem}", "ERROR")
        else:
            self.log("", "INFO")
            self.log("‚úì Aucun probl√®me d√©tect√©!", "SUCCESS")

        # Sauvegarder le rapport JSON
        report = {
            "timestamp": datetime.now().isoformat(),
            "gamepad": self.joystick.get_name() if self.joystick else "None",
            "actions": self.actions,
            "problems": self.problems
        }

        report_file = Path("D:/KOF Ultimate/ai_gamepad_report.json")
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        self.log(f"", "INFO")
        self.log(f"üìÑ Rapport sauvegard√©: {report_file}", "SUCCESS")

    def run(self):
        """Lance le processus complet"""
        # Clear le log pr√©c√©dent
        if self.log_file.exists():
            self.log_file.unlink()

        self.log("=" * 60, "INFO")
        self.log("ü§ñ IA NAVIGATEUR MANETTE - KOF ULTIMATE", "INFO")
        self.log("=" * 60, "INFO")

        # √âtape 1: D√©tecter la manette
        if not self.detect_gamepad():
            self.log("", "INFO")
            self.log("‚ùå Impossible de continuer sans manette", "ERROR")
            self.generate_report()
            return False

        # √âtape 2: V√©rifier que le jeu est lanc√©
        self.log("", "INFO")
        self.log("üéÆ V√©rification du jeu...", "INFO")

        try:
            windows = pyautogui.getWindowsWithTitle("KOF")
            if not windows:
                self.log("‚ö†Ô∏è  Jeu non d√©tect√© - assurez-vous qu'il est lanc√©", "WARNING")
        except:
            pass

        # √âtape 3: Tester la navigation
        self.test_gamepad_in_game()

        # √âtape 4: G√©n√©rer le rapport
        self.generate_report()

        self.log("", "INFO")
        self.log("=" * 60, "INFO")
        self.log("‚úì TEST TERMIN√â", "SUCCESS")
        self.log("=" * 60, "INFO")

        return True

if __name__ == "__main__":
    print("\n")
    print("=" * 60)
    print("ü§ñ IA NAVIGATEUR MANETTE - MODE AUTO")
    print("=" * 60)
    print()
    print("Cette IA va:")
    print("  1. D√©tecter votre manette")
    print("  2. Tester la navigation dans le jeu")
    print("  3. Signaler tous les probl√®mes")
    print()
    print("D√©marrage automatique dans 2 secondes...")
    print()

    time.sleep(2)

    navigator = GamepadNavigatorAI()
    navigator.run()

    print("\n")
    print("‚úì Test termin√© - rapport g√©n√©r√©")
    print()

    pygame.quit()
    sys.exit(0)
