"""
KOF Ultimate Online - Test Automatique du Matchmaking
Lance 2 sessions IA qui testent le syst√®me de matchmaking
"""

import time
import threading
import random
from player_profile_system import PlayerProfileSystem
from matchmaking_client import MatchmakingClient


class AITestSession:
    """Session de test IA pour le matchmaking"""

    def __init__(self, session_id, username, password, pin):
        self.session_id = session_id
        self.username = username
        self.password = password
        self.pin = pin

        self.profile_system = PlayerProfileSystem()
        self.matchmaking_client = None
        self.profile = None
        self.match_found = False
        self.opponent_info = None

    def run(self):
        """Lance la session de test"""
        print(f"\n{'='*60}")
        print(f"  SESSION IA {self.session_id} - {self.username}")
        print(f"{'='*60}\n")

        # √âtape 1: Cr√©er ou charger le profil
        print(f"[IA {self.session_id}] üìù Cr√©ation/connexion au profil...")
        self._setup_profile()

        # √âtape 2: Se connecter au serveur de matchmaking
        print(f"[IA {self.session_id}] üîå Connexion au serveur de matchmaking...")
        if not self._connect_to_server():
            print(f"[IA {self.session_id}] ‚ùå √âchec de connexion au serveur")
            return

        # √âtape 3: Attendre un peu avant de lancer la recherche
        wait_time = random.uniform(1, 3)
        print(f"[IA {self.session_id}] ‚è±Ô∏è  Attente de {wait_time:.1f}s avant la recherche...")
        time.sleep(wait_time)

        # √âtape 4: Lancer la recherche de match
        print(f"[IA {self.session_id}] üîç Lancement de la recherche de match...")
        self._start_search()

        # √âtape 5: Attendre qu'un match soit trouv√©
        print(f"[IA {self.session_id}] ‚è≥ En attente d'un adversaire...")
        timeout = 30  # 30 secondes max
        elapsed = 0

        while not self.match_found and elapsed < timeout:
            time.sleep(1)
            elapsed += 1

            if elapsed % 5 == 0:
                print(f"[IA {self.session_id}] ‚è≥ Recherche en cours... ({elapsed}s)")

        # √âtape 6: V√©rifier si un match a √©t√© trouv√©
        if self.match_found:
            print(f"\n[IA {self.session_id}] ‚úÖ MATCH TROUV√â!")
            print(f"[IA {self.session_id}] üéÆ Adversaire: {self.opponent_info['username']}")
            print(f"[IA {self.session_id}] üìä MMR adversaire: {self.opponent_info['mmr']}")
            print(f"[IA {self.session_id}] üèÜ Niveau adversaire: {self.opponent_info['level']}")
            print(f"[IA {self.session_id}] üìà Record: {self.opponent_info['wins']}W - {self.opponent_info['losses']}L")

            # Simuler l'acceptation du match
            time.sleep(2)
            print(f"[IA {self.session_id}] ‚úì Match accept√©!")

        else:
            print(f"[IA {self.session_id}] ‚è±Ô∏è  Timeout: Aucun match trouv√©")

        # √âtape 7: Se d√©connecter
        time.sleep(2)
        print(f"[IA {self.session_id}] üëã D√©connexion...")
        self._disconnect()

        print(f"\n[IA {self.session_id}] ‚úì Session termin√©e\n")

    def _setup_profile(self):
        """Configure le profil du joueur"""
        # V√©rifier si le profil existe
        existing_profile = self.profile_system.get_profile(self.username)

        if existing_profile:
            print(f"[IA {self.session_id}] ‚úì Profil existant trouv√©")
            self.profile = existing_profile
        else:
            # Cr√©er un nouveau profil
            print(f"[IA {self.session_id}] üÜï Cr√©ation d'un nouveau profil")
            self.profile = self.profile_system.create_profile(
                self.username,
                self.password,
                self.pin
            )

            if not self.profile:
                print(f"[IA {self.session_id}] ‚ùå √âchec de cr√©ation du profil")
                return

        # Connexion au profil
        if self.profile_system.login(self.username, self.password, self.pin):
            print(f"[IA {self.session_id}] ‚úì Connect√© au profil")
            print(f"[IA {self.session_id}] üìä MMR: {self.profile['stats']['ranking_points']}")
            print(f"[IA {self.session_id}] üèÜ Niveau: {self.profile['stats']['level']}")
        else:
            print(f"[IA {self.session_id}] ‚ùå √âchec de connexion au profil")

    def _connect_to_server(self):
        """Se connecte au serveur de matchmaking"""
        self.matchmaking_client = MatchmakingClient()

        # D√©finir les callbacks
        self.matchmaking_client.on_match_found = self._on_match_found
        self.matchmaking_client.on_connected = self._on_connected
        self.matchmaking_client.on_disconnected = self._on_disconnected
        self.matchmaking_client.on_error = self._on_error

        # Se connecter
        success = self.matchmaking_client.connect(self.username, self.profile)

        if success:
            print(f"[IA {self.session_id}] ‚úì Connect√© au serveur")
            return True
        else:
            print(f"[IA {self.session_id}] ‚ùå √âchec de connexion au serveur")
            return False

    def _start_search(self):
        """Lance la recherche de match"""
        mode = random.choice(["ranked", "quick"])
        success = self.matchmaking_client.search_match(mode)

        if success:
            print(f"[IA {self.session_id}] ‚úì Recherche lanc√©e (mode: {mode})")
        else:
            print(f"[IA {self.session_id}] ‚ùå √âchec du lancement de la recherche")

    def _disconnect(self):
        """Se d√©connecte du serveur"""
        if self.matchmaking_client:
            self.matchmaking_client.disconnect()

    # Callbacks
    def _on_match_found(self, match_data):
        """Callback quand un match est trouv√©"""
        self.match_found = True
        self.opponent_info = match_data.get("opponent", {})

    def _on_connected(self, response):
        """Callback de connexion"""
        pass

    def _on_disconnected(self):
        """Callback de d√©connexion"""
        pass

    def _on_error(self, error):
        """Callback d'erreur"""
        print(f"[IA {self.session_id}] ‚ùå Erreur: {error}")


def run_test():
    """Lance le test avec 2 sessions IA"""
    print("\n" + "="*60)
    print("   KOF ULTIMATE ONLINE - TEST AUTOMATIQUE MATCHMAKING")
    print("="*60)
    print("\n‚ö†Ô∏è  PR√âREQUIS: Le serveur de matchmaking doit √™tre lanc√©!")
    print("   Commande: python matchmaking_server.py\n")

    input("Appuyez sur Entr√©e pour lancer le test...")

    # Cr√©er 2 sessions IA
    print("\nü§ñ Cr√©ation des sessions IA...\n")

    ai1 = AITestSession(
        session_id=1,
        username="AI_TestPlayer_1",
        password="test123",
        pin="1234"
    )

    ai2 = AITestSession(
        session_id=2,
        username="AI_TestPlayer_2",
        password="test456",
        pin="5678"
    )

    # Lancer les sessions dans des threads s√©par√©s
    print("üöÄ Lancement des sessions de test...\n")

    thread1 = threading.Thread(target=ai1.run, daemon=False)
    thread2 = threading.Thread(target=ai2.run, daemon=False)

    thread1.start()
    thread2.start()

    # Attendre que les threads se terminent
    thread1.join()
    thread2.join()

    # R√©sum√©
    print("\n" + "="*60)
    print("   R√âSUM√â DU TEST")
    print("="*60)

    if ai1.match_found and ai2.match_found:
        print("‚úÖ TEST R√âUSSI!")
        print(f"‚úì {ai1.username} et {ai2.username} se sont connect√©s")

        if ai1.opponent_info and ai2.opponent_info:
            if ai1.opponent_info["username"] == ai2.username and ai2.opponent_info["username"] == ai1.username:
                print(f"‚úì Les deux joueurs se sont trouv√©s mutuellement!")
            else:
                print(f"‚ö†Ô∏è  Les joueurs ont √©t√© match√©s avec d'autres adversaires")
                print(f"   {ai1.username} vs {ai1.opponent_info['username']}")
                print(f"   {ai2.username} vs {ai2.opponent_info['username']}")
    else:
        print("‚ùå TEST √âCHOU√â")
        print(f"   {ai1.username}: {'‚úì Match trouv√©' if ai1.match_found else '‚ùå Aucun match'}")
        print(f"   {ai2.username}: {'‚úì Match trouv√©' if ai2.match_found else '‚ùå Aucun match'}")

    print("\n" + "="*60 + "\n")


if __name__ == "__main__":
    run_test()
