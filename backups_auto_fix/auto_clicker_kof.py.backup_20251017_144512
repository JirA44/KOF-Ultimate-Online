#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
KOF ULTIMATE - Auto Clicker
Clique automatiquement pour √©viter les erreurs et passer les √©crans
Sans besoin de cl√© API
"""

import time
import pyautogui
import win32gui
import win32con
import subprocess
from pathlib import Path

class KOFAutoClicker:
    """Auto-clicker pour KOF Ultimate"""

    def __init__(self):
        self.game_dir = Path(r"D:\KOF Ultimate Online")
        self.exe_path = self.game_dir / "KOF_Ultimate_Online.exe"
        self.process = None
        self.window_handle = None
        self.is_running = False

    def find_game_window(self):
        """Trouve la fen√™tre du jeu"""
        def callback(hwnd, windows):
            if win32gui.IsWindowVisible(hwnd):
                title = win32gui.GetWindowText(hwnd)
                if "mugen" in title.lower() or "kof" in title.lower():
                    windows.append(hwnd)
            return True

        windows = []
        win32gui.EnumWindows(callback, windows)

        if windows:
            self.window_handle = windows[0]
            return True
        return False

    def focus_game_window(self):
        """Met le focus sur la fen√™tre du jeu"""
        if self.window_handle:
            try:
                win32gui.ShowWindow(self.window_handle, win32con.SW_RESTORE)
                win32gui.SetForegroundWindow(self.window_handle)
                time.sleep(0.2)
                return True
            except:
                return False
        return False

    def launch_game(self):
        """Lance le jeu"""
        print("üéÆ Lancement du jeu...")

        if not self.exe_path.exists():
            print(f"‚ùå Ex√©cutable non trouv√©: {self.exe_path}")
            return False

        try:
            # Lancer le jeu
            self.process = subprocess.Popen(
                [str(self.exe_path)],
                cwd=str(self.game_dir)
            )

            print(f"‚úÖ Jeu lanc√© (PID: {self.process.pid})")

            # Attendre que la fen√™tre apparaisse
            print("‚è≥ Attente de la fen√™tre du jeu...")
            for i in range(30):
                time.sleep(0.5)
                if self.find_game_window():
                    print("‚úÖ Fen√™tre trouv√©e!")
                    self.is_running = True
                    return True

            print("‚ùå Fen√™tre non trouv√©e")
            return False

        except Exception as e:
            print(f"‚ùå Erreur au lancement: {e}")
            return False

    def auto_click_sequence(self):
        """S√©quence de clics automatiques pour passer les √©crans"""
        print("\nüñ±Ô∏è  AUTO-CLICKER ACTIF")
        print("=" * 60)

        # Attendre le chargement initial
        print("\n[1/6] Attente chargement initial (10s)...")
        time.sleep(10)

        # S√©quence de navigation dans les menus
        actions = [
            ("Clic Entr√©e (passer √©cran de titre)", "enter", 2),
            ("Clic Entr√©e (confirmer)", "enter", 1.5),
            ("Navigation vers Arcade Mode", "down", 0.5),
            ("S√©lection Arcade Mode", "enter", 2),
            ("Attente √©cran s√©lection", None, 2),
            ("S√©lection personnage (Entr√©e)", "enter", 1.5),
            ("Confirmation √©quipe", "enter", 2),
        ]

        for i, (description, key, wait) in enumerate(actions, 2):
            print(f"\n[{i}/6] {description}...")

            if self.focus_game_window():
                if key:
                    pyautogui.press(key)
                    print(f"   ‚úì Touche '{key}' appuy√©e")
            else:
                print("   ‚ö† Focus perdu, tentative de r√©cup√©ration...")
                self.find_game_window()

            time.sleep(wait)

        print("\n" + "=" * 60)
        print("‚úÖ S√©quence termin√©e! Le jeu devrait √™tre lanc√©.")
        print("\nüí° CONSEIL: Le jeu est maintenant en mode combat.")
        print("   Vous pouvez jouer normalement!")

    def monitor_and_click(self, duration_minutes=30):
        """Surveille et clique p√©riodiquement pendant X minutes"""
        print(f"\nüîÑ Mode surveillance activ√© pour {duration_minutes} minutes")
        print("   Clics automatiques toutes les 5 secondes...")

        end_time = time.time() + (duration_minutes * 60)

        while time.time() < end_time and self.is_running:
            # V√©rifier si le jeu tourne toujours
            if not self.find_game_window():
                print("\n‚ö† Fen√™tre du jeu perdue!")
                break

            # Cliquer p√©riodiquement pour √©viter les timeouts
            if self.focus_game_window():
                # Alterner entre diff√©rentes touches
                keys = ["enter", "space", "escape"]
                key = keys[int(time.time()) % len(keys)]

                pyautogui.press(key)
                print(f"‚è±Ô∏è  {time.strftime('%H:%M:%S')} - Clic: {key}", end='\r')

            time.sleep(5)

        print("\n\n‚úÖ Surveillance termin√©e")

    def run_complete_sequence(self):
        """Lance le jeu avec auto-clicker complet"""
        print("\n" + "=" * 60)
        print("  KOF ULTIMATE - AUTO CLICKER")
        print("  √âvite les erreurs et lance le jeu automatiquement")
        print("=" * 60)

        # Lancer le jeu
        if not self.launch_game():
            print("\n‚ùå Impossible de lancer le jeu")
            return

        # S√©quence de clics
        self.auto_click_sequence()

        # Mode surveillance (optionnel)
        print("\n" + "=" * 60)
        print("Mode surveillance d√©sactiv√© pour l'instant.")
        print("Le jeu est lanc√© et pr√™t!")
        print("=" * 60)

def main():
    """Point d'entr√©e"""
    try:
        # V√©rifier les d√©pendances
        import pyautogui
        import win32gui
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("\nüì• Installation...")

        module = str(e).split()[-1].replace("'", "")
        if "pyautogui" in module:
            import subprocess
            subprocess.run([
                "python", "-m", "pip", "install", "pyautogui"
            ])
        elif "win32gui" in module:
            import subprocess
            subprocess.run([
                "python", "-m", "pip", "install", "pywin32"
            ])

        print("\n‚úÖ D√©pendances install√©es!")
        print("‚ö†Ô∏è  Veuillez relancer ce script.\n")
        input("Appuyez sur Entr√©e pour quitter...")
        return

    clicker = KOFAutoClicker()
    clicker.run_complete_sequence()

    print("\n\nüéÆ Le jeu tourne maintenant!")
    print("   Vous pouvez fermer cette fen√™tre.\n")

    input("Appuyez sur Entr√©e pour quitter l'auto-clicker...")

if __name__ == '__main__':
    main()
