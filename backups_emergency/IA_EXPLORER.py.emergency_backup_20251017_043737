# -*- coding: utf-8 -*-
"""
Agent IA Explorer - Fait parcourir tous les menus et teste le jeu
"""

import os
import sys
import time
import subprocess
from pathlib import Path
import pyautogui
import json
from datetime import datetime

class IAExplorer:
    def __init__(self):
        self.base_dir = Path(r'D:\KOF Ultimate Online Online Online Online Online')
        self.rapport = {
            'timestamp': datetime.now().isoformat(),
            'tests_effectues': [],
            'bugs_trouves': [],
            'screenshots': []
        }

    def print_header(self, text):
        print(f"\n{'='*80}")
        print(f"  {text}")
        print(f"{'='*80}\n")

    def attendre(self, secondes, message=""):
        """Attend avec message"""
        if message:
            print(f"‚è≥ {message} ({secondes}s)")
        time.sleep(secondes)

    def verifier_jeu_lance(self):
        """V√©rifie si le jeu est lanc√©"""
        try:
            result = subprocess.run(
                ['powershell', '-Command',
                 'Get-Process -Name "KOF_Ultimate_Online" -ErrorAction SilentlyContinue | Select-Object Name'],
                capture_output=True,
                text=True,
                timeout=5
            )
            return 'KOF_Ultimate_Online' in result.stdout
        except:
            return False

    def lancer_jeu(self):
        """Lance le jeu"""
        self.print_header("üéÆ LANCEMENT DU JEU")

        exe_path = self.base_dir / "KOF_Ultimate_Online.exe"

        if not exe_path.exists():
            print("‚ùå Ex√©cutable introuvable!")
            return False

        try:
            print("üöÄ Lancement du jeu...")
            subprocess.Popen([str(exe_path)], cwd=str(self.base_dir))

            # Attendre que le jeu d√©marre
            for i in range(20):
                if self.verifier_jeu_lance():
                    print("‚úÖ Jeu lanc√© avec succ√®s!")
                    self.attendre(5, "Chargement du menu principal")
                    return True
                time.sleep(1)

            print("‚ö†Ô∏è Le jeu tarde √† d√©marrer...")
            return True  # On continue quand m√™me

        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            return False

    def prendre_screenshot(self, nom):
        """Prend un screenshot"""
        try:
            screenshot = pyautogui.screenshot()
            screenshot_path = self.base_dir / f"screenshots_ia/{nom}.png"
            screenshot_path.parent.mkdir(exist_ok=True)
            screenshot.save(screenshot_path)
            self.rapport['screenshots'].append(str(screenshot_path))
            print(f"üì∏ Screenshot sauvegard√©: {nom}.png")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Screenshot √©chou√©: {e}")
            return False

    def naviguer_menus(self):
        """Navigue dans les menus du jeu"""
        self.print_header("üß≠ NAVIGATION DANS LES MENUS")

        actions = [
            ("Menu Principal", "screenshot_menu_principal", 3),
            ("Descendre vers VS MODE", "bas bas", 1),
            ("Screenshot VS MODE", "screenshot_vs_mode", 2),
            ("Entrer dans VS MODE", "a", 2),
            ("Selection personnages", "screenshot_selection_chars", 3),
            ("Navigation personnages", "droite droite droite", 1),
            ("Screenshot grille", "screenshot_grille_chars", 2),
            ("Choisir personnage 1", "a", 2),
            ("Screenshot P1 choisi", "screenshot_p1_choisi", 2),
            ("Navigation P2", "droite droite droite", 1),
            ("Choisir personnage 2", "a", 2),
            ("Screenshot P2 choisi", "screenshot_p2_choisi", 2),
            ("Attente chargement combat", "wait", 5),
            ("Screenshot VS Screen", "screenshot_vs_screen", 3),
            ("Attente d√©but combat", "wait", 3),
            ("Screenshot combat", "screenshot_combat", 2),
        ]

        for action_nom, action, delai in actions:
            print(f"üìç {action_nom}...")

            if action.startswith("screenshot_"):
                self.prendre_screenshot(action)
            elif action == "wait":
                self.attendre(delai)
            else:
                # Simuler les touches
                touches = action.split()
                for touche in touches:
                    if touche == "bas":
                        pyautogui.press('down')
                    elif touche == "haut":
                        pyautogui.press('up')
                    elif touche == "gauche":
                        pyautogui.press('left')
                    elif touche == "droite":
                        pyautogui.press('right')
                    elif touche == "a":
                        pyautogui.press('a')
                    elif touche == "enter":
                        pyautogui.press('enter')
                    time.sleep(0.5)

            self.attendre(delai)

            self.rapport['tests_effectues'].append({
                'action': action_nom,
                'timestamp': datetime.now().isoformat(),
                'statut': 'OK'
            })

    def tester_combat(self):
        """Teste un combat rapide"""
        self.print_header("‚öîÔ∏è TEST DE COMBAT")

        print("ü•ä Simulation de coups...")

        # Simuler quelques coups
        coups = ['a', 's', 'd', 'f', 'g', 'h']

        for i in range(15):
            coup = coups[i % len(coups)]
            pyautogui.press(coup)
            time.sleep(0.3)

            if i % 5 == 0:
                self.prendre_screenshot(f"combat_action_{i}")

        print("‚úÖ Test de combat termin√©")

    def retour_menu(self):
        """Retourne au menu"""
        self.print_header("üîô RETOUR AU MENU")

        print("‚èé Appui sur √âchap...")
        pyautogui.press('esc')
        self.attendre(2)

        pyautogui.press('esc')
        self.attendre(2)

    def tester_modes(self):
        """Teste diff√©rents modes de jeu"""
        self.print_header("üéØ TEST DES DIFF√âRENTS MODES")

        modes = [
            ("ARCADE", "a", 2),
            ("VS MODE", "bas", 1),
            ("TRAINING", "bas bas bas bas bas bas", 1),
            ("OPTIONS", "bas", 1),
        ]

        print("üìã Navigation dans les modes...")

        for mode_nom, navigation, _ in modes:
            print(f"  ‚Üí Test {mode_nom}")

            # Retour au menu principal
            pyautogui.press('esc')
            self.attendre(1)

            # Navigation
            touches = navigation.split()
            for touche in touches:
                if touche == "bas":
                    pyautogui.press('down')
                elif touche == "haut":
                    pyautogui.press('up')
                time.sleep(0.3)

            self.prendre_screenshot(f"menu_{mode_nom.lower().replace(' ', '_')}")
            self.attendre(1)

    def analyser_logs(self):
        """Analyse les logs du jeu"""
        self.print_header("üìä ANALYSE DES LOGS")

        log_file = self.base_dir / "mugen.log"

        if not log_file.exists():
            print("‚ÑπÔ∏è Aucun log trouv√© (jeu pas encore lanc√© ou pas d'erreurs)")
            return

        with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
            log_content = f.read()

        # Chercher les erreurs
        erreurs = []
        for line in log_content.split('\n'):
            if 'error' in line.lower() or 'fatal' in line.lower():
                erreurs.append(line.strip())

        if erreurs:
            print(f"‚ö†Ô∏è {len(erreurs)} erreurs trouv√©es dans le log:")
            for err in erreurs[:10]:  # Afficher les 10 premi√®res
                print(f"  - {err}")
                self.rapport['bugs_trouves'].append(err)
        else:
            print("‚úÖ Aucune erreur dans le log du jeu!")

    def generer_rapport(self):
        """G√©n√®re le rapport final"""
        self.print_header("üìÑ G√âN√âRATION DU RAPPORT")

        rapport_path = self.base_dir / "ia_exploration_complete.json"

        self.rapport['resume'] = {
            'total_tests': len(self.rapport['tests_effectues']),
            'bugs_trouves': len(self.rapport['bugs_trouves']),
            'screenshots': len(self.rapport['screenshots']),
            'duree': 'Complete'
        }

        with open(rapport_path, 'w', encoding='utf-8') as f:
            json.dump(self.rapport, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ Rapport sauvegard√©: {rapport_path}")
        print()
        print("üìä R√âSUM√â:")
        print(f"  Tests effectu√©s: {self.rapport['resume']['total_tests']}")
        print(f"  Screenshots: {self.rapport['resume']['screenshots']}")
        print(f"  Bugs trouv√©s: {self.rapport['resume']['bugs_trouves']}")

    def explorer_complet(self):
        """Exploration compl√®te du syst√®me"""
        print("\n" + "="*80)
        print("  ü§ñ AGENT IA EXPLORER - EXPLORATION COMPL√àTE")
        print("="*80)

        # √âtape 1: Lancer le jeu
        if not self.lancer_jeu():
            print("‚ùå Impossible de lancer le jeu")
            return

        # √âtape 2: Naviguer dans les menus
        self.attendre(3, "Attente stabilisation du jeu")
        self.naviguer_menus()

        # √âtape 3: Tester le combat
        self.attendre(2)
        self.tester_combat()

        # √âtape 4: Retour et test des autres modes
        self.attendre(2)
        self.retour_menu()
        self.attendre(2)
        self.tester_modes()

        # √âtape 5: Analyser les logs
        self.analyser_logs()

        # √âtape 6: Rapport final
        self.generer_rapport()

        print("\n‚úÖ EXPLORATION COMPL√àTE TERMIN√âE!")
        print("   Consultez ia_exploration_complete.json pour le rapport d√©taill√©")

def main():
    try:
        import pyautogui
    except ImportError:
        print("Installation de pyautogui...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", "pyautogui"])
        print("Veuillez relancer le script")
        input("Appuyez sur Entr√©e...")
        return

    print("\n‚ö†Ô∏è  IMPORTANT:")
    print("  - Ne touchez pas √† la souris/clavier pendant l'exploration")
    print("  - L'IA va contr√¥ler le jeu automatiquement")
    print("  - Dur√©e estim√©e: 3-5 minutes")
    print()

    reponse = input("Lancer l'exploration automatique? (oui/non): ").strip().lower()

    if reponse in ['oui', 'o', 'y', 'yes']:
        explorer = IAExplorer()
        explorer.explorer_complet()
    else:
        print("Exploration annul√©e")

if __name__ == '__main__':
    main()
