#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
KOF ULTIMATE - Test Visuel Automatis√©
Lance le jeu, teste Eve et capture le menu automatiquement
"""

import subprocess
import time
import os
from pathlib import Path
from datetime import datetime
import sys

# Installer pyautogui si n√©cessaire
try:
    import pyautogui
    import win32gui
    import win32con
    from PIL import Image
except ImportError:
    print("Installation des d√©pendances...")
    os.system(f"{sys.executable} -m pip install pyautogui pywin32 Pillow --quiet")
    import pyautogui
    import win32gui
    import win32con
    from PIL import Image

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    BOLD = '\033[1m'
    RESET = '\033[0m'

class VisualTester:
    """Testeur visuel automatis√©"""

    def __init__(self, game_dir):
        self.game_dir = Path(game_dir)
        self.exe_path = self.game_dir / "KOF BLACK R.exe"
        self.process = None
        self.window_handle = None
        self.screenshots_dir = self.game_dir / "visual_test_results" / datetime.now().strftime("%Y%m%d_%H%M%S")
        self.screenshots_dir.mkdir(parents=True, exist_ok=True)
        self.results = []

    def find_game_window(self):
        """Trouve la fen√™tre du jeu"""
        def callback(hwnd, windows):
            if win32gui.IsWindowVisible(hwnd):
                title = win32gui.GetWindowText(hwnd)
                if "mugen" in title.lower() or "kof" in title.lower():
                    windows.append(hwnd)
            return True

        windows = []
        win32gui.EnumWindows(callback, windows)

        if windows:
            self.window_handle = windows[0]
            return True
        return False

    def launch_game(self):
        """Lance le jeu"""
        print(f"\n{Colors.CYAN}üéÆ Lancement du jeu...{Colors.RESET}")

        # Nettoyer ancien log
        log_file = self.game_dir / "mugen.log"
        if log_file.exists():
            log_file.unlink()

        # Lancer
        self.process = subprocess.Popen(
            [str(self.exe_path)],
            cwd=str(self.game_dir),
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )

        print(f"{Colors.GREEN}‚úì Jeu lanc√© (PID: {self.process.pid}){Colors.RESET}")

        # Attendre fen√™tre
        print(f"{Colors.CYAN}Attente de la fen√™tre...{Colors.RESET}")
        for i in range(30):
            time.sleep(0.5)
            if self.find_game_window():
                print(f"{Colors.GREEN}‚úì Fen√™tre trouv√©e!{Colors.RESET}")

                # Mettre au premier plan
                try:
                    win32gui.ShowWindow(self.window_handle, win32con.SW_RESTORE)
                    win32gui.SetForegroundWindow(self.window_handle)
                    time.sleep(1)
                except:
                    pass

                return True

        print(f"{Colors.RED}‚úó Fen√™tre non trouv√©e{Colors.RESET}")
        return False

    def capture_screenshot(self, name):
        """Capture l'√©cran"""
        timestamp = datetime.now().strftime("%H%M%S")
        filename = f"{timestamp}_{name}.png"
        filepath = self.screenshots_dir / filename

        try:
            if self.window_handle:
                # Capturer la fen√™tre du jeu
                rect = win32gui.GetWindowRect(self.window_handle)
                x, y, x2, y2 = rect
                width = x2 - x
                height = y2 - y

                screenshot = pyautogui.screenshot(region=(x, y, width, height))
                screenshot.save(str(filepath))
                print(f"{Colors.GREEN}  üì∏ {filename}{Colors.RESET}")
                return filepath
        except Exception as e:
            print(f"{Colors.RED}  ‚úó Erreur capture: {e}{Colors.RESET}")

        return None

    def test_menu_visual(self):
        """Teste le menu visuellement"""
        print(f"\n{Colors.CYAN}{Colors.BOLD}üé® TEST VISUEL DU MENU{Colors.RESET}")
        print(f"{Colors.CYAN}{'='*80}{Colors.RESET}\n")

        print(f"{Colors.CYAN}Attente du chargement (15s)...{Colors.RESET}")
        time.sleep(15)

        # Capture menu initial
        screenshot = self.capture_screenshot("01_menu_principal")

        if screenshot:
            # Analyser le screenshot
            result = self.analyze_screenshot(screenshot, "Menu Principal")
            self.results.append(result)

            if result['dark']:
                print(f"{Colors.RED}  ‚ùå Fond sombre d√©tect√© - animations possiblement absentes{Colors.RESET}")
            else:
                print(f"{Colors.GREEN}  ‚úì Fond visuellement actif{Colors.RESET}")

        # Naviguer dans le menu
        print(f"\n{Colors.CYAN}Navigation dans les options...{Colors.RESET}")

        for i in range(8):
            pyautogui.press('down')
            time.sleep(0.5)

            screenshot = self.capture_screenshot(f"02_option_{i+1}")

            if screenshot and i == 4:  # Option "MULTIJOUEUR EN LIGNE" normalement
                result = self.analyze_screenshot(screenshot, f"Option {i+1}")
                self.results.append(result)

        print(f"\n{Colors.GREEN}‚úì Navigation termin√©e{Colors.RESET}")

    def test_eve_character(self):
        """Teste le personnage Eve corrig√©"""
        print(f"\n{Colors.CYAN}{Colors.BOLD}üé≠ TEST PERSONNAGE EVE{Colors.RESET}")
        print(f"{Colors.CYAN}{'='*80}{Colors.RESET}\n")

        # Retour au d√©but du menu
        for _ in range(10):
            pyautogui.press('up')
            time.sleep(0.2)

        time.sleep(1)

        # Descendre √† VS MODE (2√®me option)
        pyautogui.press('down')
        time.sleep(0.5)
        self.capture_screenshot("03_vs_mode_highlight")

        # Valider
        print(f"{Colors.CYAN}Entr√©e dans VS MODE...{Colors.RESET}")
        pyautogui.press('enter')
        time.sleep(3)

        # √âcran de s√©lection de personnage
        screenshot = self.capture_screenshot("04_character_select")

        # Chercher Eve (se d√©placer dans la grille)
        print(f"{Colors.CYAN}Recherche du personnage Eve...{Colors.RESET}")

        # Eve est normalement dans les premiers personnages
        # Essayer de s√©lectionner Eve
        time.sleep(2)
        pyautogui.press('enter')
        time.sleep(2)

        # Si √ßa charge sans erreur, Eve fonctionne!
        screenshot = self.capture_screenshot("05_eve_loading")

        # Attendre voir si erreur
        time.sleep(5)

        # V√©rifier si on est dans un match ou si erreur
        screenshot = self.capture_screenshot("06_eve_result")

        if screenshot:
            result = self.analyze_screenshot(screenshot, "Test Eve")
            self.results.append(result)

            if result['mostly_black']:
                print(f"{Colors.RED}  ‚ùå √âcran noir - Eve possiblement en erreur{Colors.RESET}")
            else:
                print(f"{Colors.GREEN}  ‚úì Eve charge correctement!{Colors.RESET}")

        # Retour au menu
        print(f"\n{Colors.CYAN}Retour au menu...{Colors.RESET}")
        pyautogui.press('esc')
        time.sleep(2)
        pyautogui.press('esc')
        time.sleep(2)

    def analyze_screenshot(self, screenshot_path, test_name):
        """Analyse un screenshot"""
        try:
            img = Image.open(screenshot_path)
            width, height = img.size

            pixels = img.load()
            total_brightness = 0
            sample_size = min(1000, width * height // 100)

            for i in range(sample_size):
                x = (i * width) // sample_size % width
                y = (i * height) // sample_size
                pixel = pixels[x, y]
                if isinstance(pixel, tuple):
                    total_brightness += sum(pixel[:3])

            avg_brightness = total_brightness / (sample_size * 3)

            return {
                'test': test_name,
                'screenshot': screenshot_path.name,
                'brightness': avg_brightness,
                'dark': avg_brightness < 30,
                'mostly_black': avg_brightness < 10
            }
        except:
            return {
                'test': test_name,
                'error': True
            }

    def check_log(self):
        """V√©rifie le log pour erreurs Eve"""
        print(f"\n{Colors.CYAN}{Colors.BOLD}üìã ANALYSE DU LOG{Colors.RESET}")
        print(f"{Colors.CYAN}{'='*80}{Colors.RESET}\n")

        log_file = self.game_dir / "mugen.log"

        if not log_file.exists():
            print(f"{Colors.RED}‚úó Log introuvable{Colors.RESET}")
            return False

        with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()

        # Chercher erreurs Eve
        eve_errors = [line for line in content.split('\n') if 'eve' in line.lower() and ('error' in line.lower() or 'failed' in line.lower())]

        if eve_errors:
            print(f"{Colors.RED}‚ùå Erreurs Eve d√©tect√©es:{Colors.RESET}")
            for error in eve_errors[:5]:
                print(f"  - {error.strip()}")
            return False
        else:
            print(f"{Colors.GREEN}‚úì Aucune erreur Eve dans le log!{Colors.RESET}")
            return True

    def stop_game(self):
        """Arr√™te le jeu"""
        print(f"\n{Colors.YELLOW}‚èπ Fermeture du jeu...{Colors.RESET}")

        if self.process:
            try:
                self.process.terminate()
                self.process.wait(timeout=5)
                print(f"{Colors.GREEN}‚úì Jeu ferm√©{Colors.RESET}")
            except:
                try:
                    self.process.kill()
                except:
                    pass

    def show_results(self):
        """Affiche les r√©sultats"""
        print(f"\n{Colors.MAGENTA}{Colors.BOLD}{'='*80}{Colors.RESET}")
        print(f"{Colors.MAGENTA}{Colors.BOLD}{'R√âSULTATS DES TESTS':^80}{Colors.RESET}")
        print(f"{Colors.MAGENTA}{Colors.BOLD}{'='*80}{Colors.RESET}\n")

        for result in self.results:
            if 'error' in result:
                print(f"{Colors.RED}‚ùå {result['test']}: Erreur d'analyse{Colors.RESET}")
            else:
                status = "‚úì" if not result['dark'] and not result['mostly_black'] else "‚ùå"
                color = Colors.GREEN if not result['dark'] and not result['mostly_black'] else Colors.RED

                print(f"{color}{status} {result['test']}{Colors.RESET}")
                print(f"  Luminosit√©: {result['brightness']:.1f}/255")
                print(f"  Screenshot: {result['screenshot']}\n")

        print(f"\n{Colors.CYAN}üìÅ Tous les screenshots: {self.screenshots_dir}{Colors.RESET}\n")

    def run_full_test(self):
        """Lance le test complet"""
        print(f"\n{Colors.MAGENTA}{Colors.BOLD}{'='*80}{Colors.RESET}")
        print(f"{Colors.MAGENTA}{Colors.BOLD}{'üéÆ TEST VISUEL AUTOMATIS√â üéÆ':^80}{Colors.RESET}")
        print(f"{Colors.MAGENTA}{Colors.BOLD}{'='*80}{Colors.RESET}\n")

        try:
            # 1. Lancer le jeu
            if not self.launch_game():
                print(f"\n{Colors.RED}‚úó √âchec du lancement{Colors.RESET}")
                return False

            # 2. Tester le menu
            self.test_menu_visual()

            # 3. Tester Eve
            self.test_eve_character()

            # 4. V√©rifier le log
            eve_ok = self.check_log()

            # 5. Arr√™ter
            self.stop_game()

            # 6. R√©sultats
            time.sleep(2)
            self.show_results()

            # R√©sum√© final
            print(f"\n{Colors.GREEN}{Colors.BOLD}‚úì TEST COMPLET TERMIN√â{Colors.RESET}\n")

            if eve_ok:
                print(f"{Colors.GREEN}üéâ PERSONNAGE EVE FONCTIONNE!{Colors.RESET}\n")
            else:
                print(f"{Colors.RED}‚ùå Personnage Eve a des erreurs{Colors.RESET}\n")

            return eve_ok

        except Exception as e:
            print(f"\n{Colors.RED}‚úó Erreur: {e}{Colors.RESET}")
            import traceback
            traceback.print_exc()
            self.stop_game()
            return False

def main():
    game_dir = r"D:\KOF Ultimate Online"

    tester = VisualTester(game_dir)
    success = tester.run_full_test()

    return 0 if success else 1

if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print(f"\n\n{Colors.YELLOW}Test interrompu{Colors.RESET}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{Colors.RED}Erreur: {e}{Colors.RESET}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
