"""
KOF Ultimate - Live Development Window
Fen√™tre de d√©veloppement en temps r√©el pour tester les modifications
"""
import os
import sys
import time
import subprocess
import json
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import tkinter as tk
from tkinter import ttk, scrolledtext

class GameDevMonitor(FileSystemEventHandler):
    """Surveille les modifications de fichiers du jeu"""

    def __init__(self, callback):
        self.callback = callback
        self.last_modified = {}

    def on_modified(self, event):
        if event.is_directory:
            return

        file_ext = Path(event.src_path).suffix.lower()
        if file_ext in ['.def', '.cns', '.air', '.cmd', '.st']:
            # √âviter les doubles d√©clenchements
            current_time = time.time()
            if event.src_path in self.last_modified:
                if current_time - self.last_modified[event.src_path] < 1:
                    return

            self.last_modified[event.src_path] = current_time
            self.callback(event.src_path)

class DevWindow:
    """Fen√™tre de d√©veloppement principale"""

    def __init__(self):
        self.root = tk.Tk()
        self.root.title("KOF Ultimate - Dev Window")
        self.root.geometry("800x600")

        self.game_process = None
        self.observer = None
        self.game_path = Path(r"D:\KOF Ultimate Online Online Online")

        self.setup_ui()
        self.start_monitoring()

    def setup_ui(self):
        """Configure l'interface"""
        # Frame sup√©rieur - Contr√¥les
        control_frame = ttk.Frame(self.root, padding="10")
        control_frame.pack(fill=tk.X)

        ttk.Button(control_frame, text="‚ñ∂ Lancer le jeu", command=self.start_game).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="‚ü≥ Recharger", command=self.reload_game).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="‚ñ† Arr√™ter", command=self.stop_game).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="‚öñ √âquilibrer", command=self.open_balancer).pack(side=tk.LEFT, padx=5)

        # S√©parateur
        ttk.Separator(self.root, orient='horizontal').pack(fill=tk.X, pady=5)

        # Frame notebook pour les onglets
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Onglet 1: Console/Logs
        log_frame = ttk.Frame(notebook)
        notebook.add(log_frame, text="üìã Console")

        self.log_text = scrolledtext.ScrolledText(log_frame, wrap=tk.WORD, height=20)
        self.log_text.pack(fill=tk.BOTH, expand=True)

        # Onglet 2: Stats des personnages
        stats_frame = ttk.Frame(notebook)
        notebook.add(stats_frame, text="üìä Stats Personnages")

        self.stats_tree = ttk.Treeview(stats_frame, columns=('Character', 'Life', 'Attack', 'Defense'), show='headings')
        self.stats_tree.heading('Character', text='Personnage')
        self.stats_tree.heading('Life', text='Vie')
        self.stats_tree.heading('Attack', text='Attaque')
        self.stats_tree.heading('Defense', text='D√©fense')
        self.stats_tree.pack(fill=tk.BOTH, expand=True)

        # Onglet 3: Fichiers surveill√©s
        watch_frame = ttk.Frame(notebook)
        notebook.add(watch_frame, text="üëÅ Fichiers surveill√©s")

        self.watch_text = scrolledtext.ScrolledText(watch_frame, wrap=tk.WORD, height=20)
        self.watch_text.pack(fill=tk.BOTH, expand=True)

        # Onglet 4: Multijoueur
        multi_frame = ttk.Frame(notebook)
        notebook.add(multi_frame, text="üåê Multijoueur")

        ttk.Label(multi_frame, text="Configuration r√©seau", font=('Arial', 12, 'bold')).pack(pady=10)
        ttk.Button(multi_frame, text="H√©berger une partie", command=self.host_game).pack(pady=5)
        ttk.Button(multi_frame, text="Rejoindre une partie", command=self.join_game).pack(pady=5)
        ttk.Button(multi_frame, text="Installer Ikemen GO", command=self.install_ikemen).pack(pady=5)

        # Barre de statut
        self.status_bar = ttk.Label(self.root, text="Pr√™t", relief=tk.SUNKEN, anchor=tk.W)
        self.status_bar.pack(fill=tk.X, side=tk.BOTTOM)

    def log(self, message):
        """Ajoute un message au log"""
        timestamp = time.strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)

    def start_monitoring(self):
        """D√©marre la surveillance des fichiers"""
        self.log("üîç D√©marrage de la surveillance des fichiers...")

        event_handler = GameDevMonitor(self.on_file_changed)
        self.observer = Observer()

        # Surveiller les dossiers importants
        watch_dirs = ['data', 'chars', 'stages']
        for dir_name in watch_dirs:
            dir_path = self.game_path / dir_name
            if dir_path.exists():
                self.observer.schedule(event_handler, str(dir_path), recursive=True)
                self.log(f"‚úì Surveillance: {dir_name}/")

        self.observer.start()
        self.status_bar.config(text="‚úì Surveillance active")

    def on_file_changed(self, file_path):
        """Appel√© quand un fichier est modifi√©"""
        file_name = Path(file_path).name
        self.log(f"üìù Modification d√©tect√©e: {file_name}")
        self.watch_text.insert(tk.END, f"{time.strftime('%H:%M:%S')} - {file_path}\n")
        self.watch_text.see(tk.END)

        # Auto-reload si le jeu tourne
        if self.game_process and self.game_process.poll() is None:
            self.log("‚ü≥ Rechargement automatique...")
            # Note: MUGEN ne supporte pas le hot-reload,
            # mais on peut ajouter √ßa avec Ikemen GO

    def start_game(self):
        """Lance le jeu"""
        if self.game_process and self.game_process.poll() is None:
            self.log("‚ö† Le jeu est d√©j√† en cours d'ex√©cution")
            return

        exe_path = self.game_path / "KOF_Ultimate_Online.exe"
        if not exe_path.exists():
            self.log("‚ùå Executable non trouv√©!")
            return

        self.log("‚ñ∂ Lancement du jeu...")
        try:
            # Lancer en mode fen√™tr√© si possible
            self.game_process = subprocess.Popen([str(exe_path)], cwd=str(self.game_path))
            self.status_bar.config(text="‚ñ∂ Jeu en cours")
            self.log("‚úì Jeu lanc√© avec succ√®s")
        except Exception as e:
            self.log(f"‚ùå Erreur au lancement: {e}")

    def reload_game(self):
        """Recharge le jeu"""
        self.log("‚ü≥ Rechargement du jeu...")
        self.stop_game()
        time.sleep(1)
        self.start_game()

    def stop_game(self):
        """Arr√™te le jeu"""
        if self.game_process and self.game_process.poll() is None:
            self.log("‚ñ† Arr√™t du jeu...")
            self.game_process.terminate()
            self.game_process.wait(timeout=5)
            self.status_bar.config(text="‚ñ† Jeu arr√™t√©")
            self.log("‚úì Jeu arr√™t√©")

    def open_balancer(self):
        """Ouvre l'outil d'√©quilibrage"""
        self.log("‚öñ Ouverture de l'outil d'√©quilibrage...")
        # Lancer le script d'√©quilibrage
        balance_script = self.game_path / "character_balancer.py"
        if balance_script.exists():
            subprocess.Popen([sys.executable, str(balance_script)])
        else:
            self.log("‚ö† Script d'√©quilibrage non trouv√©")

    def host_game(self):
        """H√©berge une partie multijoueur"""
        self.log("üåê Configuration du mode h√©bergement...")
        self.log("‚Ñπ N√©cessite Ikemen GO - Cliquez sur 'Installer Ikemen GO'")

    def join_game(self):
        """Rejoint une partie"""
        self.log("üåê Mode rejoindre une partie...")
        self.log("‚Ñπ N√©cessite Ikemen GO")

    def install_ikemen(self):
        """Guide d'installation Ikemen GO"""
        install_info = """
=== Installation Ikemen GO ===

1. T√©l√©charger: github.com/ikemen-engine/Ikemen-GO/releases
2. Extraire dans: D:\\KOF Ultimate Online\\
3. Copier les fichiers du jeu actuel
4. Configuration automatique disponible

Voulez-vous que j'ouvre le guide complet?
"""
        self.log(install_info)

    def run(self):
        """Lance la fen√™tre"""
        self.log("üéÆ KOF Ultimate - Fen√™tre de d√©veloppement")
        self.log("=" * 50)
        self.log("‚úì Syst√®me pr√™t")
        self.log("‚Ñπ Modifiez vos fichiers, les changements seront d√©tect√©s")
        self.root.mainloop()

    def cleanup(self):
        """Nettoyage √† la fermeture"""
        if self.observer:
            self.observer.stop()
            self.observer.join()
        self.stop_game()

if __name__ == "__main__":
    try:
        # Installer watchdog si n√©cessaire
        try:
            import watchdog
        except ImportError:
            print("Installation de watchdog...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", "watchdog"])
            print("‚úì Watchdog install√©. Relancez le script.")
            sys.exit(0)

        app = DevWindow()
        app.run()
        app.cleanup()
    except KeyboardInterrupt:
        print("\n‚úì Arr√™t propre")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
